openapi: 3.0.3
info:
  version: 2.0.0
  title: Lumx Protocol
  description: Lumx Protocol API V2
servers:
  - url: 'https://protocol-staging.int.lumx.io/v2'
paths:
  /wallets:
    post:
      summary: Create a wallet
      description: Creates a wallet.
      tags:
        - Wallets
      responses:
        '201':
          description: Successfully created the wallet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletResponse'
      security:
        - apiKey: []
    get:
      tags:
        - Wallets
      summary: Read all wallets
      description: >-
        This endpoint reads the id and address of all wallets associated with
        your API key.
      responses:
        '200':
          description: The list of wallets was retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WalletListResponse'
      security:
        - apiKey: []
  '/wallets/{walletId}':
    get:
      tags:
        - Wallets
      summary: Read a wallet
      description: This endpoint reads the tokens that belong to a wallet
      parameters:
        - name: walletId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the wallet.
      responses:
        '200':
          description: >-
            The details of the wallet and the list of tokens it holds were
            retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletResponse'
      security:
        - apiKey: []
  # '/wallets/{walletId}/sign':
    # post:
    #   tags:
    #     - Wallets
    #   summary: Sign a message
    #   description: Sign a message using the specified wallet.
    #   parameters:
    #     - name: walletId
    #       in: path
    #       required: true
    #       schema:
    #         type: string
    #         format: uuid
    #       description: The ID of the wallet that will be used to sign.
    #   requestBody:
    #     content:
    #       application/json:
    #         schema:
    #           type: object
    #           properties:
    #             message:
    #               type: string
    #           required:
    #             - message
    #   responses:
    #     '200':
    #       description: The message was signed succesfully.
    #       content:
    #         application/json:
    #           schema:
    #             type: object
    #             properties:
    #               message:
    #                 type: string
    #               signature:
    #                 type: string
  /contracts:
    post:
      tags:
        - Contracts
      summary: Create a contract
      description: >-
        This endpoint creates a contract, but doesn't deploy it. Use the "Deploy
        a contract" endpoint to deploy the contract to the blockchain.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractRequest'
              required:
                - name
                - type
                - description
                - blockchainName
                - maxPerAddress
      responses:
        '201':
          description: Contract created successfully (but not deployed yet).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractResponse'
      security:
        - apiKey: []
    get:
      tags:
        - Contracts
      summary: Read all contracts
      description: This endpoint reads all contracts
      responses:
        '200':
          description: The list of contracts was retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContractResponse'
      security:
        - apiKey: []
  '/contracts/{contractId}':
    get:
      tags:
        - Contracts
      summary: Read a contract
      description: This endpoint reads a contract
      parameters:
        - name: contractId
          in: path
          description: The ID of the contract.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The details of this contract were retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractResponse'
      security:
        - apiKey: []
    patch:
      tags:
        - Contracts
      summary: Update a contract
      description: >-
        This endpoint updates a contract. Only contracts that haven't been
        deployed yet can be updated.
      parameters:
        - name: contractId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the contract.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractRequest'
      responses:
        '200':
          description: Contract updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractResponse'
      security:
        - apiKey: []
  '/contracts/{contractId}/deploy':
    post:
      tags:
        - Contracts
      summary: Deploy a contract
      description: >-
        This endpoint deploys a contract to the blockchain. Because this action
        creates a transaction on the blockchain, it might take some seconds to
        finish. We recommend using this route to deploy contracts beforehand, as
        opposed to calling it upon your end-user's interaction.
      parameters:
        - name: contractId
          in: path
          description: The ID of the contract to be deployed.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Contract deployed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractResponse'
      security:
        - apiKey: []
  '/contracts/{contractId}/token-types':
    post:
      tags:
        - Contracts
      summary: Create a token type
      description: >-
        Create a token type for a contract, enabling that contract to mint
        tokens that will have the characteristics defined here.
      parameters:
        - name: contractId
          in: path
          description: The ID of the contract to which the token type will be added.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenTypeCreateRequest'
              required:
                - name
                - description
                - initialSupply
      responses:
        '201':
          description: Token type succesfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenTypeResponse'
      security:
        - apiKey: []
    get:
      tags:
        - Contracts
      summary: Read all token types
      description: Read all token types of a given contract
      parameters:
        - name: contractId
          in: path
          description: The ID of the contract.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The list of token types for this contract was retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenTypeResponse'
      security:
        - apiKey: []
  '/contracts/{contractId}/token-types/{tokenTypeId}':
    get:
      tags:
        - Contracts
      summary: Read a token type
      description: Read a token type from a contract
      parameters:
        - name: contractId
          in: path
          description: The ID of the contract to which the token type belongs.
          required: true
          schema:
            type: string
            format: uuid
        - name: tokenTypeId
          in: path
          description: The ID of the token type.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The details of this token type were retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenTypeResponse'
      security:
        - apiKey: []
    patch:
      tags:
        - Contracts
      summary: Update a token type
      description: Update a token type of a contract
      parameters:
        - name: contractId
          in: path
          description: The ID of the contract to which the token type belongs.
          required: true
          schema:
            type: string
            format: uuid
        - name: tokenTypeId
          in: path
          description: The ID of the token type.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenTypeUpdateRequest'
      responses:
        '200':
          description: The token type was updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenTypeResponse'
      security:
        - apiKey: []
  /transactions/mints:
    post:
      tags:
        - Transactions
      summary: Mint tokens
      description: >-
        Mint one or multiple tokens and send them to a wallet. Important: This
        is an ASYNC route! Use the read transaction route to check the mint's
        status.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MintRequest'
              required:
                - tokenTypeId
                - walletId
                - quantity
      responses:
        '202':
          description: >-
            The mint request was submitted to the blockchain. Important: This is
            an ASYNC route! Use the read transaction route to check the mint's
            status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MintTransactionResponse'
      security:
        - apiKey: []
  /transactions/transfers:
    post:
      tags:
        - Transactions
      summary: Transfer tokens
      description: >-
        Transfer tokens from a wallet. Important: This is an ASYNC route! Use
        the read transaction route to check the transfer's status.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
              required:
                - tokenTypeId
                - to
                - from
      responses:
        '202':
          description: >-
            The transfer operation was submitted to the blockchain. Important:
            This is an ASYNC route! Use the read transaction route to check the
            transfer's status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferTransactionResponse'
      security:
        - apiKey: []
  /transactions:
    post:
      tags:
        - Transactions
      summary: Invoke a custom transaction
      description: Invoke any function of a smart contract
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomTransactionRequest'
              required:
                - walletId
                - contractAddress
                - functionSignature
      responses:
        '202':
          description: >-
            The transaction was submitted to the blockchain. Important: This is
            an ASYNC route! Use the read transaction route to check its status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomTransactionResponse'
    get:
      tags:
        - Transactions
      summary: Read all transactions
      description: This endpoint reads all transactions made with your API key.
      responses:
        '200':
          description: The list of transactions was retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionResponse'
      security:
        - apiKey: []
  '/transactions/{trasactionId}':
    get:
      tags:
        - Transactions
      summary: Read a transaction
      description: This endpoint reads a transaction made with your API key.
      parameters:
        - name: trasactionId
          in: path
          description: The ID of the transaction.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The details of the transaction were retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
      security:
        - apiKey: []
components:
  schemas:
    WalletResponse:
      type: object
      properties:
        id:
          type: string
          description: The id for this wallet.
          format: uuid
        address:
          description: The blockchain address for this wallet.
          type: string
        tokens:
          description: Tokens that belong to this wallet.
          type: array
          items:
            $ref: '#/components/schemas/TokenResponse'
        createdAt: 
          type: string 
          format: date-time
          description: The timestamp from when the wallet was created.
        updatedAt:
          type: string 
          format: date-time
          description: The timestamp from when the wallet was last updated.
    WalletListResponse:
      type: object
      properties:
        id:
          type: string
          description: The id for this wallet.
          format: uuid
        address:
          type: string
          description: The blockchain address for this wallet.
    ContractRequest:
      type: object
      properties:
        type:
          type: string
          enum:
            - fungible
            - non_fungible
          description: >-
            The type of the contract. See <help page URL> to understand the
            differences between the contract types.
        name:
          type: string
          description: The name of the contract.
        description:
          type: string
          description: The description of the contract.
        blockchainName:
          type: string
          enum:
            - polygon
            - linea
            - ethereum
          description: The name of the blockchain used for the contract.
          default: polygon
        maxPerAddress:
          type: integer
          description: The maximum number of tokens allowed per address.
    ContractResponse:
      type: object
      properties:
        id:
          format: uuid
          type: string
          description: The ID of the contract.
        address:
          type: string
          description: >-
            The blockchain address of this contract (only for deployed
            contracts)
          nullable: true
        type:
          type: string
          description: The type of the contract.
        name:
          type: string
          description: The name of the contract.
        description:
          type: string
          nullable: true
          description: The description of the contract.
        blockchainName:
          type: string
          description: The blockchain name of the contract.
          enum:
            - polygon
            - linea
            - ethereum
        scanUrl:
          type: string
          nullable: true
          description: >-
            The block scan address of this contract, where you can see it live
            on the blockchain (only for deployed contracts).
        maxPerAddress:
          type: integer
          description: >-
            The maximum number of tokens that a single wallet can get 
            from this contract through minting. This limit doesn't apply for transfers.
        createdAt: 
          type: string 
          format: date-time
          description: The timestamp from when the contract was created.
        updatedAt:
          type: string 
          format: date-time
          description: The timestamp from when the contract was last updated.
        deployedAt:
          type: string 
          format: date-time
          nullable: true
          description: The timestamp from when the contract was deployed to the blockchain.
    TokenTypeCreateRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the token type.
        description:
          type: string
          description: The description of the token type.
        initialSupply:
          type: number
          description: The initial supply of the token type.
          maximum: 2000000000
        traits:
          type: object
          description: >-
            The traits of the token type. The key is the name of the trait and
            the value is the value of the trait.
        imageUrl:
          type: string
          description: >-
            The image URL of the token type. Supported formats are PNG, JPEG,
            GIF or MP4.
    TokenTypeResponse:
      type: object
      properties:
        id:
          format: uuid
          type: string
          description: The ID of the token type.
        contractId:
          format: uuid
          type: string
          description: The ID of the contract to which this token type belongs.
        name:
          type: string
          description: The name of the token type.
        description:
          type: string
          description: The description of the token type.
          nullable: true
        initialSupply:
          type: number
          description: The initial supply of the token type.
          maximum: 2000000000
        currentSupply:
          type: number
          description: The remaining supply for this token type.
        traits:
          type: object
          description: >-
            The traits of the token type. The key is the name of the trait and
            the value is the value of the trait.
          properties:
            trait1_name:
              type: string
              default: trait1_value
            trait2_name:
              type: string
              default: trait2_value
            trait3_name:
              type: string
              default: trait3_value
        imageUrl:
          type: string
          nullable: true
          description: >-
            The URL for the image you want to display for this token type.
        metadataUrl:
          type: string
          description: The URL where this token's metadata JSON is located.
        createdAt: 
          type: string 
          format: date-time
          description: The timestamp from when the token type was created.
        updatedAt:
          type: string 
          format: date-time
          description: The timestamp from when the token type was last updated.
    TokenTypeUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the token type.
        description:
          type: string
          description: The description of the token type.
        initialSupply:
          type: number
          description: >-
            The initial supply of the token type. Can only be updated if this
            token type's contract hasn't been deployed yet.
          maximum: 2000000000
        traits:
          type: object
          description: >-
            The traits of the token type. The key is the name of the trait and
            the value is the value of the trait.
        imageUrl:
          type: string
          description: >-
            The image URL of the token type. Supported formats are PNG, JPEG,
            GIF or MP4.
    TokenResponse:
      properties:
        tokenTypeId:
          type: string
          format: uuid
          nullable: true
          description: >-
            If this token belongs to a contract created through Lumx Protocol,
            this field indicates the id of the corresponding token type.
        blockchainName:
          type: string
          description: The name of the blockchain to which this token belongs.
          enum:
            - polygon
            - linea
            - ethereum
        contractAddress:
          type: string
          description: The address of the contract to which this token belongs.
        contractType:
          type: string
          enum:
            - fungible
            - non_fungible
          description: >-
            The type of the contract to which this token belongs ('fungible' or
            'non_fungible').
        name:
          type: string
          description: The token's name.
        nftId:
          type: string
          nullable: true
          description: >-
            Only for non-fungible contracts. Represents the sequential mint
            number for this token.
        uri:
          type: string
          description: The URI where this token's metadata is located.
          nullable: true
        metadata:
          type: object
          nullable: true
          description: 'The token''s metadata, such as image address, traits, etc.'
        symbol:
          type: string
          nullable: true
          description: The token's symbol.
        quantity:
          type: number
          description: How much of that token is present at this wallet.
    TransactionResponse:
      type: object
      properties:
        metadata: 
          description: An object containing the parameters used for this transaction.
          oneOf:
            - $ref: '#/components/schemas/MintTransactionMetadata'
            - $ref: '#/components/schemas/TransferTransactionMetadata'
            - $ref: '#/components/schemas/CustomTransactionMetadata'
        id:
          type: string
          description: The ID of the transaction.
          format: uuid
        type:
          type: string
          description: The transaction type (mint or transfer)
          enum:
            - mint
            - transfer
            - custom
        status:
          type: string
          description: The status of the transaction.
          enum:
            - pending
            - success
            - failed
        transactionHash:
          type: string
          description: The identifier of this transaction on the blockchain.
          nullable: true
        scanUrl:
          type: string
          description: >-
            The block scan address of this transaction, where you can see it
            live on the blockchain.
        createdAt: 
          type: string 
          format: date-time
          description: The timestamp from when the transaction was submitted.
        updatedAt: 
          type: string 
          format: date-time
          description: The timestamp from when the transaction was last updated.
        completedAt:
          type: string 
          format: date-time
          description: The timestamp from when the transaction was completed.
          nullable: true
    MintTransactionResponse:
      type: object
      properties:
        metadata: 
          description: An object containing the parameters used for this transaction.
          oneOf:
            - $ref: '#/components/schemas/MintTransactionMetadata'
        id:
          type: string
          description: The ID of the transaction.
          format: uuid
        type:
          type: string
          description: The transaction type (mint or transfer)
          enum:
            - mint
        status:
          type: string
          description: The status of the transaction.
          enum:
            - pending
            - success
            - failed
        transactionHash:
          type: string
          description: The identifier of this transaction on the blockchain.
          nullable: true
        scanUrl:
          type: string
          description: >-
            The block scan address of this transaction, where you can see it
            live on the blockchain.
        createdAt: 
          type: string 
          format: date-time
          description: The timestamp from when the transaction was submitted.
        updatedAt: 
          type: string 
          format: date-time
          description: The timestamp from when the transaction was last updated.
        completedAt:
          type: string 
          format: date-time
          description: The timestamp from when the transaction was completed.
          nullable: true
    TransferTransactionResponse:
      type: object
      properties:
        metadata: 
          description: An object containing the parameters used for this transaction.
          oneOf:
            - $ref: '#/components/schemas/TransferTransactionMetadata'
        id:
          type: string
          description: The ID of the transaction.
          format: uuid
        type:
          type: string
          description: The transaction type (mint or transfer)
          enum:
            - transfer
        status:
          type: string
          description: The status of the transaction.
          enum:
            - pending
            - success
            - failed
        transactionHash:
          type: string
          description: The identifier of this transaction on the blockchain.
          nullable: true
        scanUrl:
          type: string
          description: >-
            The block scan address of this transaction, where you can see it
            live on the blockchain.
        createdAt: 
          type: string 
          format: date-time
          description: The timestamp from when the transaction was submitted.
        updatedAt: 
          type: string 
          format: date-time
          description: The timestamp from when the transaction was last updated.
        completedAt:
          type: string 
          format: date-time
          description: The timestamp from when the transaction was completed.
          nullable: true
    CustomTransactionResponse:
      type: object
      properties:
        metadata: 
          description: An object containing the parameters used for this transaction.
          oneOf:
            - $ref: '#/components/schemas/CustomTransactionMetadata'
        id:
          type: string
          description: The ID of the transaction.
          format: uuid
        type:
          type: string
          description: The transaction type (mint or transfer)
          enum:
            - custom
        status:
          type: string
          description: The status of the transaction.
          enum:
            - pending
            - success
            - failed
        transactionHash:
          type: string
          description: The identifier of this transaction on the blockchain.
          nullable: true
        scanUrl:
          type: string
          description: >-
            The block scan address of this transaction, where you can see it
            live on the blockchain.
        createdAt: 
          type: string 
          format: date-time
          description: The timestamp from when the transaction was submitted.
        updatedAt: 
          type: string 
          format: date-time
          description: The timestamp from when the transaction was last updated.
        completedAt:
          type: string 
          format: date-time
          description: The timestamp from when the transaction was completed.
          nullable: true
    MintRequest:
      properties:
        tokenTypeId:
          format: uuid
          type: string
          description: The ID of the token type to be minted.
        walletId:
          type: string
          format: uuid
          description: The ID of the wallet that will receive the tokens.
        quantity:
          type: number
          default: 1
          description: The quantity of tokens.
    TransferRequest:
      type: object
      properties:
        tokenTypeId:
          type: string
          description: The ID of the token type to be transferred.
          format: uuid
        from:
          type: string
          description: The id of the wallet that will send the tokens.
          format: uuid
        to:
          type: string
          description: The address of the wallet that will receive tokens.
        quantity:
          type: number
          description: >-
            The quantity of tokens to transfer. Required if you're trying to
            transfer a **fungible token**. Not applicable for non-fungible
            tokens.
        tokenId:
          type: string
          description: >-
            The ID of the token. Required if you're trying to transfer a
            **non-fungible token**. Not applicable for fungible tokens.
    CustomTransactionRequest:
      properties:
        walletId:
          format: uuid
          type: string
          description: The ID of the wallet that will be used to perform the transaction.
        contractAddress:
          type: string
          description: The address of the contract where the transaction will occur.
        blockchainName:
          type: string
          description: The blockchain where the contract is deployed.
          enum:
            - polygon
            - linea
            - ethereum
        functionSignature:
          type: string
          description: The function's signature (name and parameter types).
        parameters:
          type: array
          description: >-
            Array containing the values to be passed to the function, in the
            order  they appear in the function's signature.
          items: 
            anyOf:
              - type: string
              - type: number
              - type: boolean
              - type: array
                items: 
                  anyOf:
                  - type: string
                  - type: number
                  - type: boolean
    MintTransactionMetadata:
      type: object
      title: Mint
      description: Parameters for a mint transaction.
      properties:
        tokenTypeId:
          type: string
          description: The id of the token type that was minted.
        quantity:
          type: number
          description: How many tokens were minted.
    TransferTransactionMetadata:
      type: object
      title: Transfer
      description: Parameters for a transfer transaction.
      properties:
        tokenTypeId:
          type: string
          description: The id of the token type that was transferred.
        quantity:
          type: number
          description: How many tokens were transferred.
        from:
          type: string 
          description: The address that sent the transfer.
        to:
          type: string 
          description: The address that received the transfer.
    CustomTransactionMetadata:
      type: object
      title: Custom
      description: Parameters for a custom transaction.
      properties:
        functionSignature:
          type: string
          description: The invoked function's signature (name and parameter types).
        parameters:
          type: array
          description: The parameters that were passed to the function.
          items: 
            anyOf:
              - type: string
              - type: number
              - type: boolean
              - type: array
                items: 
                  anyOf:
                  - type: string
                  - type: number
                  - type: boolean
  securitySchemes:
    apiKey:
      type: http
      scheme: bearer
      description: Bearer authentication header of the form `Bearer <API_KEY>`.