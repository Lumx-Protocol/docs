---
openapi: 3.0.3
info:
  version: 3.0.0
  title: Lumx Protocol
  description: Lumx Protocol API
servers:
  - url: https://protocol-staging.int.lumx.io/v1
paths:
  "/sessions":
    post:
      tags:
        - Users
      summary: Start a session
      description: This endpoint registers a user or starts a session of a already registered user via Google, e-mail or sms.
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserRequest"
              required:
                - clientId
                - method
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                properties:
                  token:
                    type: string
                    description: The user's auth token.
                  account:
                    "$ref": "#/components/schemas/UserResponse"
        "202":
          description: Accepted
  "/resend-code":
    post:
      tags:
        - Users
      summary: Resend code
      description: This endpoint resends an authentication code via e-mail
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  description: The e-mail of the user.
              required:
                - email
      responses:
        "202":
          description: Accepted
  "/verify-code":
    post:
      tags:
        - Users
      summary: Verify code
      description: This endpoint verifies an authentication code
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  description: The e-mail of the user.
                code:
                  type: string
                  description: The received code by the user.
              required:
                - email
                - code
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                properties:
                  token:
                    type: string
                    description: The user's auth token.
                  account:
                    "$ref": "#/components/schemas/UserResponse"
  "/users/me":
    get:
      tags:
        - Users
      summary: Read self
      description: This endpoint reads the user's own information
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserResponse"
      security:
        - userAuth: []
    patch:
      tags:
        - Users
      summary: Update a user
      description: This endpoint updates a user
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserUpdateRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserResponse"
      security:
        - userAuth: []
  "/users/me/wallet":
    get:
      tags:
        - Users
      summary: Read wallet
      description: This endpoint reads the wallet from the user
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserWalletResponse"
      security:
        - userAuth: []
  "/users/me/wallet/transfer":
    post:
      tags:
        - Users
      summary: Transfer tokens
      description: This endpoint transfers tokens
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/MintTransferRequest"
              required:
                - itemTypeId
                - to
      responses:
        "200":
          description: The NFT or token(s) have been successfully transferred. You can check the transaction on a block explorer using the transaction hash that was returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MintTransferResponse"
      security:
        - clientAuth: []
  "/contracts":
    get:
      tags:
        - Contracts
      summary: Read all contracts
      description: This endpoint reads all contracts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ContractResponse"
      security:
        - clientAuth: []
    post:
      tags:
        - Contracts
      summary: Create a contract
      description: This endpoint creates a contract
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ContractRequest"
              required:
                - name
                - type
                - description
                - blockchainName
                - currency
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContractResponse"
      security:
        - clientAuth: []
  "/contracts/{contractId}":
    get:
      tags:
        - Contracts
      summary: Read a contract
      description: This endpoint reads a contract
      parameters:
        - name: contractId
          in: path
          description: The ID of the contract.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/ContractResponse"
                  - properties:
                      address:
                        nullable: true
                        type: string
                        description: The address of the contract.
                      abi:
                        items:
                          type: object
                        nullable: true
                        description: The ABI of the contract.
                        type: array
    patch:
      tags:
        - Contracts
      summary: Update a contract
      description: This endpoint updates a contract
      parameters:
        - name: contractId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the contract.
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ContractRequest"
      responses:
        "200":
          description: Contract updated successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContractResponse"
      security:
        - clientAuth: []
  "/contracts/{contractId}/deploy":
    post:
      tags:
        - Contracts
      summary: Deploy a contract
      description: This endpoint deploys a contract
      parameters:
        - name: contractId
          in: path
          description: The ID of the contract.
          required: true
          schema:
            type: string
      responses:
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/ContractResponse"
                  - properties:
                      address:
                        nullable: true
                        type: string
                        description: The address of the contract.
                      abi:
                        items:
                          type: object
                        nullable: true
                        description: The ABI of the contract.
                        type: array
      security:
        - clientAuth: []
  "/contracts/{contractId}/allowlist":
    post:
      tags:
        - Contracts
      summary: Add to allowlist
      description: This endpoint adds a list of records to the allowlist
      parameters:
        - name: contractId
          in: path
          description: The ID of the contract.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ContractAllowlistAddRequest"
              required:
                - emails
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContractAllowlistResponse"
      security:
        - clientAuth: []
    get:
      tags:
        - Contracts
      summary: Read allowlist
      description: This endpoint reads all records from the allowlist
      parameters:
        - name: contractId
          in: path
          description: The ID of the contract
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContractAllowlistResponse"
      security:
        - clientAuth: []
  "/contracts/{contractId}/allowlist/remove":
    post:
      tags:
        - Contracts
      summary: Remove from allowlist
      description: This endpoint removes a list of records from the allowlist
      parameters:
        - name: contractId
          in: path
          description: The ID of the contract.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ContractAllowlistRemoveRequest"
              required:
                - emails
      responses:
        "204":
          description: No Content
      security:
        - clientAuth: []
  "/item-types":
    get:
      tags:
        - Contracts
      summary: Read all item types
      description: This endpoint reads all item types
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ItemTypeResponse"
      security:
        - clientAuth: []
    post:
      tags:
        - Item Types
      summary: Create an item type
      description: This endpoint creates an item type.
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ItemTypeRequest"
              required:
                - contractId
                - name
                - description
                - supply
                - price
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ItemTypeResponse"
      security:
        - clientAuth: []
  "/item-types/{itemTypeId}":
    get:
      tags:
        - Item Types
      summary: Read an item type
      description: This endpoint reads an item type
      parameters:
        - name: itemTypeId
          in: path
          description: The ID of the item type.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ItemTypeResponse"
    patch:
      tags:
        - Item Types
      summary: Update an item type
      description: This endpoint updates an item type
      parameters:
        - name: itemTypeId
          in: path
          description: The ID of the item type.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ItemTypeUpdateRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ItemTypeResponse"
      security:
        - clientAuth: []
  "/mints":
    get:
      tags:
        - Contracts
      summary: Read all mints
      description: This endpoint reads all mints
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: "array"
                items: 
                 $ref: "#/components/schemas/MintResponse"
      security:
        - clientAuth: []
    post:
      tags:
        - Mints
      summary: Mint a token
      description: This endpoint mints a specific amount of tokens
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/MintRequest"
              required:
                - itemTypeId
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/MintResponse"
                  - properties:
                      pix:
                        properties:
                          qrCode:
                            type: string
                            description: The QR code of the pix.
                          brCode:
                            type: string
                            description: The br code of the pix.
                          tax:
                            type: number
                            description: The tax of the pix.
                          expiresAt:
                            format: date-time
                            type: string
                            description: The expiration date and time of the pix.
                        type: object
                    type: object
      security:
        - userAuth: []
  "/mints/airdrop":
    post:
      tags:
        - Mints
      summary: Send an airdrop
      description: This endpoint airdrops a specific amount of tokens to a user
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/MintAirdropRequest"
              required:
                - itemTypeId
                - walletAddress
      responses:
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MintResponse"
      security:
        - clientAuth: []
  "/mints/{mintId}":
    get:
      tags:
        - Mints
      summary: Read a mint
      description: This endpoint reads a mint
      parameters:
        - name: mintId
          in: path
          description: The ID of the mint.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MintResponse"
  "/rewards":
    get:
      tags:
        - Rewards
      summary: Read all rewards
      description: This endpoint reads all rewards
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: "array"
                items:
                 $ref: "#/components/schemas/RewardResponse"
      security:
        - clientAuth: []
    post:
      tags:
        - Rewards
      summary: Create a reward
      description: This endpoint creates a reward
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RewardRequest"
              required:
                - name
                - category
                - description
                - content
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RewardResponse"
      security:
        - clientAuth: []
  "/rewards/{rewardId}":
    get:
      tags:
        - Rewards
      summary: Read a reward
      description: This endpoint reads a reward
      parameters:
        - name: rewardId
          in: path
          description: The ID of the reward
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RewardResponse"
    patch:
      tags:
        - Rewards
      summary: Update a reward
      description: This endpoint updates a reward
      parameters:
        - name: rewardId
          in: path
          description: The ID of the reward.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RewardRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RewardResponse"
      security:
        - userAuth: []
    delete:
      tags:
        - Rewards
      summary: Delete a reward
      description: This endpoint deletes a reward
      parameters:
        - name: rewardId
          in: path
          description: The ID of the reward.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
      security:
        - clientAuth: []
  "/rewards/{rewardId}/claim":
    post:
      tags:
        - Rewards
      summary: Claim a reward
      description: This endpoint claims a reward
      parameters:
        - name: rewardId
          in: path
          description: The ID of the reward.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  content:
                    type: string
                    description: The content of the reward.
      security:
        - userAuth: []
  "/discount-codes":
    post:
      summary: Create a discount code
      description: This endpoint create a discount code
      tags:
        - Discount Code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DiscountCodeCreate"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscountCodeResponse"
      security:
        - clientAuth: []
  "/discount-codes/{discountCodeId}":
    get:
      summary: Read a discount code
      description: This endpoint read a discount code
      tags:
        - Discount Code
      parameters:
        - name: discountCodeId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the discount code.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscountCodeResponse"
    delete:
      summary: Delete a discount code
      description: This endpoint deletes a discount code
      tags:
        - Discount Code
      parameters:
        - name: discountCodeId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the discount code.
      responses:
        "204":
          description: No Content
      security:
        - clientAuth: []
    patch:
      summary: Update a discount code
      description: This endpoint updates a discount code
      tags:
        - Discount Code
      parameters:
        - name: discountCodeId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the discount code.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DiscountCodeUpdate"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscountCodeResponse"
  "/account/users":
    post:
      summary: Create account for user
      description: This endpoint allows an client to manually create a user. Instead of users to self-register,
      tags:
        - Account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminUserRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                properties:
                  account:
                    "$ref": "#/components/schemas/UserResponse"
      security:
        - clientAuth: []
  "/account/users/{userId}":
    patch:
      summary: Update a user
      description: This endpoint allows an client to manually update a user data. Instead of users to self update.
      tags: 
        - Account
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user.
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserUpdateRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserResponse"
      security:
        - clientAuth: []
      
components:
  schemas:
    AdminUserRequest:
      type: object
      properties:
        email:
          type: string
          description: The e-mail of the user.
    UserRequest:
      type: object
      properties:
        clientId:
          type: string
          description:
            Identifies to which client the action is attached. Don't have a clientId
            yet? [Request one](/authenticate).
        method:
          type: string
          enum: ["email", "google", "phone"]
          description: Sign-up method used to create a new user.
        email:
          type: string
          description: The e-mail of the user. Required when the method is **email**.
        phone:
          type: string
          description: The phone number of the user. Required when the method is **phone**. Format "+55 11 99999-9999"
        accessToken:
          type: string
          description:
            The access token provided by Google OAuth. Required when method
            is **google**.
    UserResponse:
      properties:
        id:
          type: string
          description: The ID of the user.
        name:
          type: string
          description: The name of the user.
        email:
          type: string
          description: The e-mail of the user.
        phone:
          type: string
          description: The phone of the user.
        avatarUrl:
          type: string
          description: The URL for the profile picture of the user.
        walletAddress:
          description: The wallet address of the user.
          type: string
        birthDate:
          description: 'The date of birth of the user. Format "YYYY-MM-DD HH:mm" (GMT+0)'
          type: string
          format: date-time
        cpf:
          description: The CPF of the user
          type: string
      type: object
    UserUpdateRequest:
      properties:
        name:
          type: string
          description: The name of the user.
        avatarUrl:
          format: url
          type: string
          description: The URL for the profile picture of the user.
        phone:
          type: string
          description: The phone of the user. Format "+55 11 999999999"
        birthDate:
          description: 'The date of birth of the user. Format "YYYY-MM-DD HH:mm" (GMT/UTC+0)'
          type: string
          format: date-time
        cpf:
          description: The CPF of the user
          type: string
      type: object
    UserRegisterResponse:
      properties:
        id:
          type: string
          description: The ID of the user.
        email:
          type: string
          description: The e-mail of the user.
        walletAddress:
          description: The wallet address of the user.
          type: string
      type: object
    UserWalletResponse:
      properties:
        mints:
          type: array
          description: The mints of the wallet.
          items:
            "$ref": "#/components/schemas/MintResponse"
        tokens:
          properties:
            ethereum:
              type: object
            polygon:
              type: object
          type: object
        walletAddress:
          description: The wallet address of the user.
          type: string
      type: object
    ContractRequest:
      properties:
        type:
          type: string
          enum: ["fungible", "non_fungible"]
          description: The type of the contract.
        name:
          type: string
          description: The name of the contract.
        description:
          type: string
          description: The description of the contract.
        blockchainName:
          type: string
          enum: ["ethereum", "polygon"]
          description: The name of the blockchain used for the contract.
        currency:
          properties:
            type:
              type: string
              enum: ["crypto", "fiat"]
              description: The type of the currency.
            symbol:
              type: string
              enum: ["ETH", "MATIC", "BRL", "USD"]
              description: The symbol of the currency.
          type: object
          description: The currency of the contract.
        maxPerAddress:
          type: integer
          default: 1
          description: The maximum number of tokens allowed per address.
        publicSaleStartsAt:
          format: date-time
          type: string
          default: "Date.now()"
          description: 'The start date and time of the public mint period. Format: "YYYY-MM-DD HH:mm" (GMT/UTC+0)'
        publicSaleEndsAt:
          format: date-time
          type: string
          description: 'The end date and time of the public mint period. Format: "YYYY-MM-DD HH:mm" (GMT/UTC+0)'
        presaleStartsAt:
          format: date-time
          type: string
          description: 'The start date and time of the presale mint period. Format: "YYYY-MM-DD HH:mm" (GMT/UTC+0)'
        presaleEndsAt:
          format: date-time
          type: string
          description: 'The end date and time of the presale mint period. Format: "YYYY-MM-DD HH:mm" (GMT/UTC+0)'
      type: object
    ContractResponse:
      properties:
        id:
          format: uuid
          type: string
          description: The ID of the contract.
        type:
          type: string
          description: The type of the contract.
        name:
          type: string
          description: The name of the contract.
        description:
          type: string
          description: The description of the contract.
        blockchainName:
          type: string
          description: The blockchain name of the contract.
        currency:
          properties:
            type:
              type: string
              description: The type of the currency.
            symbol:
              type: string
              description: The symbol of the currency.
          type: object
          description: The currency of the contract.
        maxPerAddress:
          type: integer
          default: 1
          description: The maximum token per address to be allowed on the mint period.
        publicSaleStartsAt:
          format: date-time
          type: string
          description: 'The start date and time of the public mint period. Format: "YYYY-MM-DD HH:mm" (GMT/UTC+0)'
        publicSaleEndsAt:
          format: date-time
          type: string
          description: 'The end date and time of the public mint period. Format: "YYYY-MM-DD HH:mm" (GMT/UTC+0)'
        presaleStartsAt:
          format: date-time
          type: string
          description: 'The start date and time of the presale mint period. Format: "YYYY-MM-DD HH:mm" (GMT/UTC+0)'
        presaleEndsAt:
          format: date-time
          type: string
          description: 'The end date and time of the presale mint period. Format: "YYYY-MM-DD HH:mm" (GMT/UTC+0)'
      type: object
    ContractAllowlistAddRequest:
      properties:
        emails:
          items:
            type: string
          description: The e-mails you want to add to the allowlist. Duplicates won't affect the current allowlist.
          type: array
      type: object
    ContractAllowlistRemoveRequest:
      properties:
        emails:
          items:
            type: string
          description: The e-mails you want to remove from the allowlist. If one of the e-mails isn't present in the allowlist, it will be ignored.
          type: array
      type: object
    ContractAllowlistResponse:
      properties:
        emails:
          items:
            type: string
          description: The e-mails of the allowlist.
          type: array
      type: object
    ItemTypeRequest:
      properties:
        contractId:
          format: uuid
          type: string
          description: The ID of the contract.
        name:
          type: string
          description: The name of the item type.
        description:
          type: string
          description: The description of the item type.
        supply:
          type: number
          description: The supply of the item type.
        price:
          type: number
          description: The price of the item type.
        traits:
          type: object
          description: The traits of the item type. The key is the name of the trait and the value is the value of the trait.
        imageUrl:
          type: string
          description: The image URL of the item type. Supported formats are PNG, JPEG, GIF or MP4.
      type: object
    ItemTypeResponse:
      properties:
        id:
          format: uuid
          type: string
          description: The ID of the item type.
        contractId:
          format: uuid
          type: string
          description: The ID of the contract.
        name:
          type: string
          description: The name of the item type.
        description:
          type: string
          description: The description of the item type.
        supply:
          type: number
          description: The supply of the item type.
        price:
          type: number
          description: The price of the item type.
        traits:
          type: object
          description: The traits of the item type. The key is the name of the trait and the value is the value of the trait.
        imageUrl:
          type: string
          description: The image URL of the item type. Supported formats are PNG, JPEG, GIF or MP4.
        uriNumber:
          type: number
          description: The URI number of the item type.
      type: object
    ItemTypeUpdateRequest:
      properties:
        name:
          type: string
          description: The name of the item type.
        description:
          type: string
          description: The description of the item type.
        supply:
          type: number
          description: The supply of the item type.
        price:
          type: number
          description: The price of the item type.
        traits:
          type: object
          description: The traits of the item type. The key is the name of the trait and the value is the value of the trait.
        imageUrl:
          type: string
          description: The image URL of the item type. Supported formats are PNG, JPEG, GIF or MP4.
      type: object
    MintRequest:
      properties:
        itemTypeId:
          format: uuid
          type: string
          description: The ID of the item type.
        amount:
          type: number
          default: 1
          description: The amount of tokens.
        paymentMethod:
          type: string
          enum: ["pix", "creditCard"]
          description: The payment method of the mint. Only required for item types that have a price greater than 0.
        cardDetails:
          type: object
          description: An object with credit card details for processing payments.
          properties:
            number:
              type: string
              description: The number of the credit card.
            expMonth:
              type: string
              description: The expiration month of the credit card.
            expYear:
              type: string
              description: The expiration year of the credit card.
            cvc:
              type: string
              description: The CVC of the credit card.
        discountCode:
          type: string
          description: The discount code of the mint.
      type: object
    MintResponse:
      properties:
        id:
          type: string
          description: The ID of the mint.
        itemTypeId:
          format: uuid
          type: string
          description: The ID of the item type.
        amount:
          type: number
          description: The amount of tokens.
        paymentMethod:
          type: string
          description: The payment method of the mint.
        price:
          type: number
          description: The price of the mint.
        status:
          type: string
          description: The status of the mint.
        transactionHash:
          type: number
          description: The price of the mint.
      type: object
    MintAirdropRequest:
      properties:
        itemTypeId:
          format: uuid
          type: string
          description: The ID of the item type.
        walletAddress:
          type: string
          description: The wallet address to receive the tokens.
        amount:
          type: number
          default: 1
          description: The amount of tokens.
    MintAirdropResponse:
      type: object
      properties:
        id:
          type: string
          description: The ID of the mint.
        itemTypeId:
          format: uuid
          type: string
          description: The ID of the item type.
        amount:
          type: number
          description: The amount of tokens.
        paymentMethod:
          type: string
          description: The payment method of the mint.
        price:
          type: number
          description: The price of the mint.
        status:
          type: string
          description: The status of the mint.
        transactionHash:
          type: number
          description: The price of the mint.
    MintTransferRequest:
      properties:
        itemTypeId:
          type: string
          description: The ID of the item type.
        to:
          type: string
          description: The address of the wallet that will receive the item type.
        quantity:
          type: string
          description: The quantity of the item type. Only available if you're trying to transfer a **fungible token**
        tokenId:
          type: string
          description: The ID of the token. Required if you're trying to transfer a **non-fungible token**.
      type: object
    MintTransferResponse:
      properties:
        transactionHash:
          type: string
          description: The transaction hash of the transfer.
      type: object
    RewardRequest:
      properties:
        itemTypeIds:
          description: The IDs of the item types that give access to this reward.
          items:
            format: uuid
            type: string
          type: array
        name:
          type: string
          description: The name of the reward.
        description:
          type: string
          description: The description of the reward.
        content:
          type: string
          description: The content of the reward. You can add a link, coupon code or any text you want your user to retrieve.
        startsAt:
          format: date-time
          type: string
          default: "Date.now()"
          description: The start date of the reward.
        endAt:
          format: date-time
          type: string
          description: The end date of the reward.
        imageUrl:
          type: string
          description: The image URL of the reward. Supported formats are PNG, JPEG, GIF or MP4.
      type: object
    RewardResponse:
      type: object
      properties:
        id:
          type: string
          description: The ID of the reward.
        itemTypes:
          description: Array containing the IDs of item types that give access to this reward.
          type: array
          items:
            type: string
            format: uuid
        name:
          type: string
          description: The name of the reward.
        description:
          type: string
          description: The description of the reward.
        startsAt:
          format: date-time
          type: string
          description: The start date of the reward.
        endAt:
          format: date-time
          type: string
          description: The end date of the reward.
        imageUrl:
          type: string
          description: The image URL of the reward.
    DiscountCodeCreate:
      type: object
      properties:
        code:
          type: string
          description: The code of the discount code.
        itemId:
          type: string
          description: The ID of the item type.
        type:
          type: string
          enum: [absolute_value, percentage]
          description: "The type of the discount code. absolute_value: The discount code will discount the absolute value of the item. percentage: The discount code will discount the percentage of the item."
        amount:
          type: number
          description: The amount of the discount code.
      required:
        - code
        - itemId
        - type
        - amount
    DiscountCodeUpdate:
      type: object
      properties:
        code:
          type: string
          description: The code of the discount code.
        itemId:
          type: string
          description: The ID of the item type.
        type:
          type: string
          enum: [absolute_value, percentage]
          description: "The type of the discount code. absolute_value: The discount code will discount the absolute value of the item. percentage: The discount code will discount the percentage of the item."
        amount:
          type: number
          description: The amount of the discount code.
    DiscountCodeResponse:
      type: object
      properties:
        id:
          type: string
          description: The ID of the discount code.
        code:
          type: string
          description: The code of the discount code.
        type:
          type: string
          enum: [absolute_value, percentage]
          description: "The type of the discount code. absolute_value: The discount code will discount the absolute value of the item. percentage: The discount code will discount the percentage of the item."
        amount:
          type: number
          description: The amount of the discount code.
        isUsed:
          type: boolean
          description: The status of the discount code. True if the discount code was used.
        itemId:
          type: string
          description: The ID of the item type.
        userId:
          type: string
          description: The ID of the user who used the discount code.
  securitySchemes:
    clientAuth:
      type: http
      scheme: bearer
      description: Bearer authentication header of the form `Bearer <API_KEY>`, where `<API_KEY>` is your auth token.
    userAuth:
      type: http
      scheme: bearer
      description: Bearer authentication header of the form `Bearer <TOKEN>`, where `<TOKEN>` is your auth token.
